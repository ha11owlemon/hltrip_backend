<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--spring的配置文件：主要配置和业务和逻辑 比如数据源-->
    <context:component-scan base-package="com.hall">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--        配置数据源-->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <bean class="com.alibaba.druid.pool.DruidDataSource" id="dataSource">
        <property name="username" value="${user}"/>
        <property name="password" value="${pwd}"/>
        <property name="driverClassName" value="${driver}"/>
        <property name="url" value="${url}" />
    </bean>


    <!-- 配置 CloseUnpaidOrdersJob 的 JobDetail -->


    <!-- 配置触发器 -->

<!---->
    <!--    配置mybatis和spring的整合-->
    <!--    1.再项目中引入mybatis整合到spring的适配包-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
        <!--        指定mybatis全局配置文件-->
        <property name="configLocation" value="classpath:mybatis-config.xml" />
        <!--        指定数据源-->
        <property name="dataSource" ref="dataSource" />
        <!--        指定mapper文件位置-->
        <property name="mapperLocations" value="classpath:mapper/*.xml" />

    </bean>

    <!--    配置扫描器，将mybatis接口的实现加入到ioc容器中-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" id="configurer">
        <!--        1.扫描所有的dao接口的实现，加入到ioc容器中-->
        <!--        2.这里dao接口，就是mapper接口-->
        <property name="basePackage" value="com.hall.DAO"/>
    </bean>



    <!--    配置事务管理器对象-->
    <bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" id="transactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <bean id="jobFactory" class="com.hall.Jobs.AutowiringSpringBeanJobFactory"/>
    <!-- Quartz Scheduler Factory -->
    <bean id="quartzScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="jobFactory" ref="jobFactory"/>
        <property name="jobDetails">
            <list>
                <ref bean="jobOneDetail"/>
                <ref bean="jobTwoDetail"/>
            </list>
        </property>
        <property name="triggers">
            <list>
                <ref bean="jobOneTrigger"/>
                <ref bean="jobTwoTrigger"/>
            </list>
        </property>
    </bean>

    <!-- Job 1 Detail -->
    <bean id="jobOneDetail" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="com.hall.Jobs.ChangeStateToComplete"/>
        <property name="durability" value="true"/>
    </bean>

    <!-- Job 1 Trigger -->
    <bean id="jobOneTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="jobOneDetail"/>
        <property name="cronExpression" value="0 0 12 * * ?"/>
    </bean>

    <!-- Job 2 Detail -->
    <bean id="jobTwoDetail" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="com.hall.Jobs.ChangeStateToCheckIn"/>
        <property name="durability" value="true"/>
    </bean>

    <!-- Job 2 Trigger -->
    <bean id="jobTwoTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="jobTwoDetail"/>
        <property name="cronExpression" value="0 0 14 * * ?"/>
    </bean>





    <!--    配置启动基于注解的声明式事务管理-->
    <!--    <tx:annotation-driven transaction-manager="transactionManager" />-->

    <!--    使用xml配置+配置切入表达式-->
    <aop:config>
        <!--    切入点表达式-->
        <aop:pointcut id="txPoint" expression="execution(* com.hall.Service..*(..))"/>

        <!--    配置事务增强规则-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
    </aop:config>

    <!-- 开启事务控制的注解支持 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--    配置事务增强【指定事务规则】，也就是指定事务如何切入-->
    <tx:advice id="txAdvice">
        <!--    *代表所有的方法都是事务方法-->
        <tx:attributes>
            <tx:method name="*"/>
            <tx:method name="get*" read-only="true" />
        </tx:attributes>
    </tx:advice>

</beans>